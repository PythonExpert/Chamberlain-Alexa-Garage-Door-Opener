import requests
import json

# Endpoint URLS for v5 API and v5.1 API
API_V5_ENDPOINT = "https://api.myqdevice.com/api/v5/"
API_V51_ENDPOINT = "https://api.myqdevice.com/api/v5.1/"
LOGIN_ENDPOINT = API_V5_ENDPOINT + "Login"
EXPAND_ACCOUNT_ENDPOINT = API_V5_ENDPOINT + "/My?expand=account"

# This ID seems to be static
application_id = "NWknvuBd7LoFHfXmKNMBcgajXtZEgKUh4V7WNzMidrpUUluDpVYVZx+xT4PCM5Kx"

# Security Token
security_token = "00000000-0000-0000-0000-00000000"

# Device Index
GARAGE_DOOR_DEVICE_INDEX = 0

# HTTP Headers
LOGIN_HEADERS = {
    "Accept": "*/*",
    "Accept-Encoding": "br, gzip, deflate",
    "Accept-Language": "en-ca",
    "User-Agent": "Chamberlain/9273 CFNetwork/974.2.1 Darwin/18.0.0",
    "MyQApplicationId": application_id
}


AUTHENTICATED_LOGIN_HEADERS = {
    "Accept": "*/*",
    "Accept-Encoding": "br, gzip, deflate",
    "Accept-Language": "en-ca",
    "User-Agent": "Chamberlain/9273 CFNetwork/974.2.1 Darwin/18.0.0",
    "MyQApplicationId": application_id,
    "SecurityToken": security_token,
    "Connection": "keep-alive",
    "Content-Type": "application/json"
}


def generate_security_token(username, password):
    """
    Given the username and password used to sign into Chamberlain's website or myQ app, send an HTTP
    GET request to login and retrieve the security token returned from the HTTP response. This security token
    is then updated in the AUTHENTICATED_LOGIN_HEADERS.
    :param username: the username used to sign in with Chamberlain
    :param password: the password for your Chamberlain account
    """
    login_data = {"Password": password,
                  "UserName": username}

    login_post = requests.post(url=LOGIN_ENDPOINT, json=login_data, headers=LOGIN_HEADERS)

    # This should be logged rather than printed
    if login_post.status_code != 200:
        print("Error logging in!")

    response = login_post.json()
    AUTHENTICATED_LOGIN_HEADERS["SecurityToken"] = response["SecurityToken"]


def get_devices_endpoint():
    """
    Returns the devices endpoint URL. This endpoint URL is generated by appending the Accounts/[AccountID] to the v5.1
    API endpoint URL.
    :return: the devices endpoint URL
    """
    account_request = requests.get(EXPAND_ACCOUNT_ENDPOINT, headers=AUTHENTICATED_LOGIN_HEADERS)

    # This should be logged rather than printed
    if account_request.status_code != 200:
        print("ERROR!")

    response = account_request.json()

    '''Form your own device endpoint URL rather than get it from ["Devices"]["href"] since that has a URL to v5 API
       which will not accept your PUT request'''
    return API_V51_ENDPOINT + "/Accounts/" + response["Account"]["Id"] + "/Devices"


def get_door_state(devices_endpoint):
    """
    Returns the garage door state (opened, closed, opening, or closing).
    :param devices_endpoint: the devices endpoint URL
    :return: the garage door state (opened, closed, opening or closing)
    """
    devices_request = requests.get(devices_endpoint, headers=AUTHENTICATED_LOGIN_HEADERS)

    # This should be logged rather than printed
    if devices_request.status_code != 200:
        print("Error retrieving door status.")

    response = devices_request.json()
    door_state = response["items"][GARAGE_DOOR_DEVICE_INDEX]["state"]["door_state"]
    return door_state


def is_door_closed(devices_endpoint):
    """
    Returns if the garage door is closed.
    :param devices_endpoint: the devices endpoint URL
    :return: whether or not the garage door is closed
    """
    return get_door_state(devices_endpoint) == "closed"


def get_device_sn_endpoint(devices_endpoint):
    """
    Returns the devices's serial number endpoint.
    :param devices_endpoint: the devices endpoint URL
    :return: the device's serial number endpoint
    """
    devices_request = requests.get(devices_endpoint, headers=AUTHENTICATED_LOGIN_HEADERS)

    # This should be logged rather than printed
    if devices_request.status_code != 200:
        print("ERROR!")

    response = devices_request.json()
    device_sn = response["items"][GARAGE_DOOR_DEVICE_INDEX]["serial_number"]
    device_sn_endpoint = devices_endpoint + "/" + device_sn
    return device_sn_endpoint


def validate_door_action(devices_endpoint, door_action):
    """
    Returns on whether or not the door action is valid. There are a few ways for an invalid action to occur:
        1) The door is opening or closing.
        2) The user requests to open the door when the door is already open.
        3) The user requests to close the door when the door is already closed.
    :param devices_endpoint: the devices endpoint URL
    :return: whether or not the door action is valid
    """
    is_valid_action = True
    if get_door_state(devices_endpoint) == "opening":
        print("Please wait. The garage door is opening.")
        is_valid_action = False
    elif get_door_state(devices_endpoint) == "closing":
        print("Please wait. The garage door is closing.")
        is_valid_action = False
    elif get_door_state(devices_endpoint) == "closed" and door_action == "close":
        is_valid_action = False
    elif get_door_state(devices_endpoint) == "open" and door_action == "open":
        is_valid_action = False
    return is_valid_action


def do_door_action(devices_endpoint, door_action):
    """
    Does a door action (open or close the door)
    :param devices_endpoint: the devices endpoint URL
    :param door_action: the door action (open or close)
    """
    device_sn_endpoint = get_device_sn_endpoint(devices_endpoint)

    actions_endpoint = device_sn_endpoint + "/actions"
    is_valid_door_action = validate_door_action(devices_endpoint)

    # If the door action isn't valid don't do the action
    if is_valid_door_action is False:
        return

    door_action_data = {"action_type": door_action}
    door_state_change_request = requests.put(actions_endpoint, headers=AUTHENTICATED_LOGIN_HEADERS,
                                             data=json.dumps(door_action_data))

    # Notifies the user when the door is being open or closed
    if door_state_change_request.status_code == 204:
        if door_action == "open":
            print("Opening the garage door")
        elif door_action == "close":
            print("Closing the garage door")


if __name__ == "__main__":
    # Just some sample code to illustrate how this works (login, open and close)
    generate_security_token("email@email.com", "password")
    devices_endpoint = get_devices_endpoint()
    get_door_state(devices_endpoint)
    # do_door_action(devices_endpoint, "open")
    # do_door_action(devices_endpoint, "close")
